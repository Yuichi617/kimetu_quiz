{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunkMiddleware from 'redux-thunk'; //ステート初期化\n\nconst info = {\n  q_no: [],\n  question: null,\n  i: 0,\n  correct: 0,\n  incorrect: 0 //    select: 0\n\n}; //レデューサ\n\nfunction counterReducer(state = info, action) {\n  switch (action.type) {\n    case 'SETINFO':\n      return {\n        q_no: action.rand_arr,\n        question: action.question,\n        i: 0,\n        correct: 0,\n        incorrect: 0,\n        select: 0\n      };\n\n    case 'CORRECT':\n      return {\n        q_no: state.q_no,\n        question: state.question,\n        i: state.i + 1,\n        correct: state.correct + 1,\n        incorrect: state.incorrect,\n        select: 0\n      };\n\n    case 'INCORRECT':\n      return {\n        q_no: state.q_no,\n        question: state.question,\n        i: state.i + 1,\n        correct: state.correct,\n        incorrect: state.incorrect + 1,\n        select: 0\n      };\n    //case 'UPDATE1':\n    //    return{\n    //        q_no : state.q_no,\n    //        question : state.question,\n    //        i : state.i,\n    //        correct : state.correct,\n    //        incorrect : state.incorrect,\n    ///        select: 1\n    //    };\n    //case 'UPDATE2':\n    //    return{\n    //        q_no : state.q_no,\n    //        question : state.question,\n    //        i : state.i,\n    //        correct : state.correct,\n    //        incorrect : state.incorrect,\n    //        select: 2\n    //    };    \n    //case 'UPDATE3':\n    //    return{\n    //        q_no : state.q_no,\n    //        question : state.question,\n    //        i : state.i,\n    //        correct : state.correct,\n    //        incorrect : state.incorrect,\n    //       select: 3\n    //    }; \n\n    default:\n      return state;\n  }\n} //Redux Persistの設定\n\n\nconst persistConfig = {\n  key: 'root',\n  storage\n}; //パーシストレデューサの作成\n\nconst persistedReducer = persistReducer(persistConfig, counterReducer); //ストア、パーシスターの作成\n\nlet store = createStore(persistedReducer, info, applyMiddleware(thunkMiddleware));\nlet pstore = persistStore(store); //initStore関数\n\nexport function initStore(state = info) {\n  return createStore(counterReducer, state, applyMiddleware(thunkMiddleware));\n} //export function initStore(state=info){\n//    return persistStore(createStore(persistedReducer, state, applyMiddleware(thunkMiddleware)))\n//}","map":null,"metadata":{},"sourceType":"module"}